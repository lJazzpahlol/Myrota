using System;
using System.Diagnostics;
using System.Collections.Generic;



namespace HyperElk.Core
{

    public class ShadowPriest : CombatRoutine
    {
        private string VersionNumber = "1.0.0";
        private int playerLevel => API.PlayerLevel;
        private bool inRange => API.TargetRange <= 36;

         // Shadow buffs
        private string VampiricEmbrace = "Vampiric Embrace";
        private string InnerFire = "Inner Fire";
        private string ShadowForm = "Shadowform";
        private string ShadowWeaving = "Shadow Weaving";
		private string PowerWordFortitude = "Power Word Fortitude";
		private string POPowerWordFortitude = "Prayer of Fortitude";
		private string DivineSpirit = "Divine Spirit";
		private string PODivineSpirit = "Prayer of Divine Spirit";
		private string ShadowProt = "Shadow Protection";
		private string POShadowProt = "Prayer of Shadow Protection";
		private string FlareOfTheHeavens = "Flare of the Heavens";
		private string DyingCurse = "Dying Curse";
		private string Starlight = "Starlight";
		
        //Shadowspells
        private string ShadowWordPain = "Shadow Word: Pain";
        private string VampiricTouch = "Vampiric Touch";
        private string DevouringPlague = "Devouring Plague";
        private string MindFlay = "Mind Flay";
        private string MindBlast = "Mind Blast";
        private string ShadowWordDeath = "Shadow Word: Death";
		private string Shadowfiend = "Shadowfiend";
		private string Trinket1 = "Trinket1";
        private string Trinket2 = "Trinket2";
		private string Stoppy = "Stopcast";
		private string Gloves = "Engineering Gloves";
		private string MO = "Mouseover";
		private string MindSear = "Mind Sear";
		private string Dispersion = "Dispersion";
		private string Fade = "Fade";
		private string InnerFocus = "Inner Focus";
		private string EatingBuff = "Food Buff";
        private string MageEatingBuff = "Mage Food Buff";
		private string Shoot = "Shoot";
		private string BigBang = "Big Bang";
		private string Shadowcrawl = "Shadowcrawl";
		private string SaroBomb = "Saronite Bomb";
		private string SapperCharge = "Global Thermal Sapper Charge";
		

        //Debuff
        private string ShadowMastery = "Shadow Mastery";
		
        //Toggles
        private string DPMove = "DPMove";
        private string Vezax = "Vezax";
		private string MOToggle = "MO";
		private string Sear = "OnlySear";
		private string NoMB = "MB/D OFF";
		private string Argent = "ArgentVehicles";
		
        //Boss
        private string ShadowCrash = "Shadow Crash";

        private int WorldPing = 15;
		
	
		private bool GlovesReady => API.Classic_GloveEnchantAvail;
		private bool hasDots => API.TargetHasDebuff(DevouringPlague) && API.TargetHasDebuff(VampiricTouch) && API.TargetHasDebuff(ShadowWordPain);
		private bool isSearing => API.CurrentCastSpellID("player") == 53023;
		private bool isFlaying => API.CurrentCastSpellID("player") == 48156;
		private bool isBoss => API.TargetIsBoss;
		private bool OnlyFlayGuidList => API.TargetGUIDNPCID == 33168 || API.TargetGUIDNPCID == 34057 || API.TargetGUIDNPCID == 32955;
		private bool LastShadowCast => (API.PlayerLastSpell != VampiricTouch || API.PlayerLastSpell != MindBlast);
		private bool IsNotEating => (!API.PlayerHasBuff(MageEatingBuff) || !API.PlayerHasBuff(EatingBuff));



        public override void Initialize()
        {
            CombatRoutine.isWOLTKRotation();
            CombatRoutine.Name = "Shadow Priest " + VersionNumber + " by Lost. \n";
            API.WriteLog("\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \n" +
                "Welcome to Shadow PVE for Wotlk Classic.\n" +
                "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            CombatRoutine.isAutoBindReady = true;
            //Shadow buffs
            AddBuff(VampiricEmbrace, 15286);
            AddBuff(InnerFire, 48168);
            AddBuff(ShadowForm, 15473);
            AddBuff(ShadowWeaving, 15258);
            AddSpell(VampiricEmbrace, 15286);
            AddSpell(InnerFire, 48168);
            AddSpell(ShadowForm, 15473);
            AddBuff(ShadowCrash, 63277);
			AddBuff(ShadowProt, 48169);
			AddBuff(POShadowProt, 48170);
			AddBuff(DivineSpirit, 48073);
			AddBuff(PODivineSpirit, 48074);
			AddBuff(PowerWordFortitude, 48161);
			AddBuff(POPowerWordFortitude, 48162);
			AddBuff(Dispersion, 48585);
			AddBuff(Fade, 586);
			AddBuff(InnerFocus, 14751);
			AddBuff(FlareOfTheHeavens, 64713);
			AddDebuff(ShadowCrash, 63277);
			AddBuff(EatingBuff, 43183);
            AddBuff(MageEatingBuff, 57073);
			AddBuff(DyingCurse, 60494);
			AddBuff(Starlight, 62807);
			
			//Items
			AddItem(SaroBomb, 41119);
			AddItem(SapperCharge, 42641);

            //Shadow Spells
            AddSpell(ShadowWordPain, 48125);
            AddDebuff(ShadowWordPain, 48125);
            AddSpell(VampiricTouch, 48160);
            AddDebuff(VampiricTouch, 48160);
            AddSpell(DevouringPlague, 48300);
            AddDebuff(DevouringPlague, 48300);
            AddSpell(MindFlay, 48156);
            AddSpell(MindBlast, 48127);
            AddSpell(ShadowWordDeath, 48158);
			AddSpell(Shadowfiend, 34433);
			AddSpell(ShadowProt, 48169, "D1");
			AddSpell(POShadowProt, 48170, "D1");
			AddSpell(DivineSpirit, 48073, "D1");
			AddSpell(PODivineSpirit, 48074, "D1");
			AddSpell(PowerWordFortitude, 48161, "D1");
			AddSpell(POPowerWordFortitude, 48162, "D1");
			AddSpell(MindSear, 53023, "D1");
			AddSpell(Dispersion, 48585, "D1");
			AddSpell(Fade, 586, "D1");
			AddSpell(InnerFocus, 14751, "D1");
			AddSpell(BigBang, 64443);
			AddSpell(Shoot);
			
			//Debuffs
            AddDebuff(ShadowMastery, 17800);

            //Toggle
            AddToggle(DPMove);
            AddToggle(Vezax);
			AddToggle(MOToggle);
			AddToggle(Sear);
			AddToggle(NoMB);
			AddToggle(Argent);
			
			CombatRoutine.AddMacro("Stopcast", "D1", "None", "None", @"/stopcasting");
			CombatRoutine.AddMacro("Shadowcrawl", "D1", "None", "None", @"/cast Shadowcrawl");
			CombatRoutine.AddMacro("Trinket1", "D1", "None", "None", @"/use 13");
			CombatRoutine.AddMacro("Trinket2", "D1", "None", "None", @"/use 14");
			CombatRoutine.AddMacro("Gloves", "D1", "None", "None", @"/use 10");
			CombatRoutine.AddMacro(ShadowWordPain + MO, "D1", "None", "None", @"/cast [@mouseover, harm, nodead] #48125#");
			CombatRoutine.AddMacro(VampiricTouch + MO, "D1", "None", "None", @"/cast [@mouseover, harm, nodead] #48160#");
			CombatRoutine.AddMacro("SaroBomb", "D1", "None", "None", @"/cast [@cursor] Saronite Bomb");
			CombatRoutine.AddMacro("SapperCharge", "D1", "None", "None", @"/cast Global Thermal Sapper Charge");
			
           

        }
		

		public override void CombatPulse()
		{
			// if (API.CanCast(Dispersion) && isBigBang) { API.CastSpell(Dispersion); API.CastSpell(Stoppy); return; }
			bool vezaxEnabled = API.ToggleIsEnabled(Vezax);
			bool onlyFlayGuidList = OnlyFlayGuidList;

			if (vezaxEnabled)
			{
				CastBestSpellVezax();
				return;
			}

			if (onlyFlayGuidList)
			{
				CastOnlyFlayNPCList();
				return;
			}

			float playerHaste = 1f + API.PlayerGetHaste();
			double mindFlayCastTimeSec = 3 / playerHaste;
			int mindFlayCastTimeMillis = (int)(mindFlayCastTimeSec * 1000);
			int mindFlayTickTimeMillis = mindFlayCastTimeMillis / 3;

			bool playerIsChanneling = API.PlayerIsChanneling;
			int playerCurrentCastTimeRemaining = API.PlayerCurrentCastTimeRemaining;
			bool withinMindFlayTickWindow = playerCurrentCastTimeRemaining <= (mindFlayTickTimeMillis + WorldPing) && playerCurrentCastTimeRemaining >= (mindFlayTickTimeMillis - WorldPing);

			if (playerIsChanneling && playerCurrentCastTimeRemaining >= mindFlayTickTimeMillis - WorldPing)
			{
				if (withinMindFlayTickWindow)
				{
					CastBestSpellNoMF();
					API.CastSpell(Shadowcrawl);
					return;
				}
				return;
			}

			bool lowCastTimeRemaining = API.PlayerCurrentCastTimeRemaining <= 30;
			bool playerCastingMindFlay = API.PlayerCurrentCastSpellID == 48156;
			bool mindFlayNearEnd = API.PlayerCurrentCastSpellID == 48156 && API.PlayerCurrentCastTimeRemaining <= WorldPing;

			if ((lowCastTimeRemaining && !playerCastingMindFlay) || mindFlayNearEnd)
			{
				CastBestSpell();
				API.CastSpell(Shadowcrawl);
				return;
			}
		}


	public void CastOnlyFlayNPCList()
		{
			if (OnlyFlayGuidList)
			{
				float playerHaste = 1f + API.PlayerGetHaste();
				float mindFlayBaseCastTimeSec = 3f;
				int mindFlayCastTimeMillis = (int)((mindFlayBaseCastTimeSec / playerHaste) * 100);
				int mindFlayTickTimeMillis = mindFlayCastTimeMillis / 3;

				if (API.CanCast(MindFlay) && !API.PlayerIsCasting(true))
				{
					API.CastSpell(MindFlay);
					return;
				}
				if (API.CanCast(MindFlay) && API.PlayerIsCasting(true) && API.PlayerCurrentCastSpellID != 48156)
				{
					API.CastSpell(MindFlay);
					return;
				}
			}
		}


		public void CastBestSpellVezax()
		{
			bool playerHasShadowCrash = API.PlayerHasDebuff(ShadowCrash);

			if (playerHasShadowCrash)
			{
				bool canCastFade = API.CanCast(Fade);
				bool playerIsMoving = API.PlayerIsMoving;

				if (canCastFade && playerIsMoving)
				{
					API.CastSpell(Fade);
					return;
				}

				bool targetLacksShadowWordPain = !API.TargetHasDebuff(ShadowWordPain);
				bool canCastShadowWordPain = API.CanCast(ShadowWordPain);
				bool playerHasShadowWeaving = API.PlayerBuffStacks(ShadowWeaving) == 5;

				if (targetLacksShadowWordPain && canCastShadowWordPain && playerHasShadowWeaving)
				{
					API.CastSpell(ShadowWordPain);
					return;
				}

				float playerHaste = 1f + API.PlayerGetHaste();
				float vtBaseCastTimeSec = 1.5f;
				int vtCastTimeMillis = (int)((vtBaseCastTimeSec / playerHaste) * 1000);

				bool shouldRefreshVampiricTouch = API.TargetDebuffRemainingTime(VampiricTouch) < vtCastTimeMillis || !API.TargetHasDebuff(VampiricTouch);
				bool canCastVampiricTouch = API.CanCast(VampiricTouch) && (API.PlayerIsChanneling || (API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch));

				if (shouldRefreshVampiricTouch && canCastVampiricTouch)
				{
					API.CastSpell(VampiricTouch);
					return;
				}

				bool targetLacksDevouringPlague = API.TargetDebuffRemainingTime(DevouringPlague) == 0;
				bool canCastDevouringPlague = API.CanCast(DevouringPlague);

				if (targetLacksDevouringPlague && canCastDevouringPlague)
				{
					API.CastSpell(DevouringPlague);
					return;
				}

				bool canCastMindFlay = API.CanCast(MindFlay);
				bool playerIsNotCastingMindFlay = !API.PlayerIsCasting(true) || API.PlayerCurrentCastSpellID != 48156;

				if (canCastMindFlay && playerIsNotCastingMindFlay)
				{
					API.CastSpell(MindFlay);
					return;
				}
			}
			else
			{
				bool playerNotAutoAttacking = !API.PlayerIsAutoAttack;
				bool playerInCombat = API.PlayerIsInCombat;
				bool canCastShoot = API.CanCast(Shoot);
				bool playerNotMoving = !API.PlayerIsMoving;

				if (playerNotAutoAttacking && playerInCombat && canCastShoot && playerNotMoving && !playerHasShadowCrash)
				{
					API.CastSpell(Shoot);
					return;
				}
			}
		}

		
		public void CastBestSpellNoMF()
		{
			bool searDisabled = !API.ToggleIsEnabled(Sear);
			bool playerLacksInnerFocus = !API.PlayerHasBuff(InnerFocus);
			bool playerIsMoving = API.PlayerIsMoving;
			bool canCastShadowWordDeath = API.CanCast(ShadowWordDeath);

			if (searDisabled && playerLacksInnerFocus)
			{
				if (playerIsMoving)
				{
					if (canCastShadowWordDeath)
					{
						API.CastSpell(ShadowWordDeath);
						return;
					}

					bool dpMoveEnabled = API.ToggleIsEnabled(DPMove);
					bool canCastDevouringPlague = API.CanCast(DevouringPlague);

					if (dpMoveEnabled && canCastDevouringPlague)
					{
						API.CastSpell(DevouringPlague);
						return;
					}
				}

				bool targetLacksShadowWordPain = !API.TargetHasDebuff(ShadowWordPain);
				bool canCastShadowWordPain = API.CanCast(ShadowWordPain);
				bool playerHasShadowWeaving = API.PlayerBuffStacks(ShadowWeaving) == 5;

				if (targetLacksShadowWordPain && canCastShadowWordPain && playerHasShadowWeaving)
				{
					API.CastSpell(ShadowWordPain);
					return;
				}

				float playerHaste = 1f + API.PlayerGetHaste();
				float vtBaseCastTimeSec = 1.5f;
				int vtCastTimeMillis = (int)((vtBaseCastTimeSec / playerHaste) * 1000);

				bool shouldRefreshVampiricTouch = API.TargetDebuffRemainingTime(VampiricTouch) < vtCastTimeMillis || !API.TargetHasDebuff(VampiricTouch);
				bool canCastVampiricTouch = API.CanCast(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch;

				if (shouldRefreshVampiricTouch && canCastVampiricTouch)
				{
					API.CastSpell(VampiricTouch);
					return;
				}

				bool targetLacksDevouringPlague = API.TargetDebuffRemainingTime(DevouringPlague) == 0;
				bool canCastMindBlast = API.CanCast(MindBlast) && API.PlayerCurrentCastSpellID != 48127 && API.LastSpellCastInGame != MindBlast;
				bool noMBDisabled = !API.ToggleIsEnabled(NoMB);
				int spellGCDPlusBuffer = (int)(API.SpellGCDTotalDuration + 20);

				if (targetLacksDevouringPlague && API.CanCast(DevouringPlague))
				{
					API.CastSpell(DevouringPlague);
					return;
				}

				if (canCastMindBlast && noMBDisabled)
				{
					API.CastSpell(MindBlast);
					return;
				}

				if (canCastShadowWordDeath && (API.TargetDebuffRemainingTime(DevouringPlague) < spellGCDPlusBuffer))
				{
					API.CastSpell(ShadowWordDeath);
					return;
				}
			}
		}


        public void CastBestSpell()
		{
				if (API.CanCast(Dispersion) && API.PlayerHealthPercent <= 10 && !API.PlayerHasBuff(Dispersion)) { API.CastSpell(Dispersion); return; }
				if (API.CanCast(Fade) && API.PlayerHealthPercent <= 15 && API.PlayerIsMoving) { API.CastSpell(Fade); return; }
				if (API.CanCast(MindSear) && API.TargetUnitInRangeCount >= 5 && IsAOE && !API.PlayerIsChanneling) { API.CastSpell(MindSear); return; }
				if (API.CanCast(MindSear) && API.ToggleIsEnabled(Sear) && !isSearing) { API.CastSpell(MindSear); return; }
				if (API.CanCast(MindBlast) && !API.PlayerIsInCombat && !API.ToggleIsEnabled(Sear) && !API.ToggleIsEnabled(NoMB)) { API.CastSpell(MindBlast); API.WriteLog("Mind Blast Opener"); return; }
				if (API.PlayerIsMoving && API.CanCast(ShadowWordDeath)) { API.CastSpell(ShadowWordDeath); return; }
				if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.PlayerBuffStacks(ShadowWeaving) == 5) { API.CastSpell(ShadowWordPain); return; }
				if (API.PlayerIsMoving && API.ToggleIsEnabled(DPMove) && API.CanCast(DevouringPlague)) { API.CastSpell(DevouringPlague); return; }
				// Cooldowns
				if (!API.PlayerIsCasting() && !API.PlayerIsChanneling && IsCooldowns && !isFlaying)
				{
					if (API.PlayerTrinketIsUsable(1) && API.PlayerTrinketRemainingCD(1) == 0) { API.CastSpell("Trinket1"); return; }
					if (API.PlayerItemCanUse(SapperCharge) && API.TargetRange <= 12) { API.CastSpell("SapperCharge"); return; }
					if (API.PlayerItemCanUse(SaroBomb) && API.PlayerCanAttackMouseover) { API.CastSpell("SaroBomb"); return; }
					if (GlovesReady) { API.CastSpell("Gloves"); return; }
					if (API.CanCast(Shadowfiend) && hasDots) { API.CastSpell(Shadowfiend); return; }
					if (API.CanCast(InnerFocus) && hasDots && (API.PlayerHasBuff(FlareOfTheHeavens) || API.PlayerHasBuff(DyingCurse)) && !API.CanCast(Shadowfiend)) { API.CastSpell(InnerFocus); return; }
					if (API.PlayerHasBuff(InnerFocus) && !API.CanCast(InnerFocus) && !API.CanCast(Shadowfiend)) { API.CastSpell(MindFlay); API.WriteLog("Mind Flay w/InnerFocus"); return; }
				}


												
			float playerHaste = 1f + API.PlayerGetHaste();
			float mindFlayBaseCastTimeSec = 3f;
			float vtBaseCastTimeSec = 1.5f;

			int mindFlayCastTimeMillis = (int)((mindFlayBaseCastTimeSec / playerHaste) * 1000);
			int mindFlayTickTimeMillis = mindFlayCastTimeMillis / 3;
			int vtCastTimeMillis = (int)((vtBaseCastTimeSec / playerHaste) * 1000);

			bool searDisabled = !API.ToggleIsEnabled(Sear);
			bool playerLacksInnerFocus = !API.PlayerHasBuff(InnerFocus);
			bool canCastVampiricTouch = API.CanCast(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch;

			if (searDisabled && playerLacksInnerFocus)
			{
				if (canCastVampiricTouch)
				{
					bool targetNeedsVampiricTouch = API.TargetDebuffRemainingTime(VampiricTouch) < vtCastTimeMillis || !API.TargetHasDebuff(VampiricTouch);

					if (targetNeedsVampiricTouch)
					{
						API.CastSpell(VampiricTouch);
						return;
					}

					if (API.ToggleIsEnabled(MOToggle) && API.PlayerCanAttackMouseover)
					{
						bool mouseoverNeedsVampiricTouch = API.MouseoverDebuffRemainingTime(VampiricTouch) < vtCastTimeMillis || !API.MouseoverHasDebuff(VampiricTouch);
						bool mouseoverNeedsShadowWordPain = !API.MouseoverHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.PlayerBuffStacks(ShadowWeaving) == 5;

						if (mouseoverNeedsVampiricTouch)
						{
							API.CastSpell(VampiricTouch + MO);
							return;
						}

						if (mouseoverNeedsShadowWordPain)
						{
							API.CastSpell(ShadowWordPain + MO);
							return;
						}
					}
				}
			}


				if (API.CanCast(InnerFire) && !API.PlayerHasBuff(InnerFire)) {
					API.CastSpell(InnerFire);
				} else if (API.CanCast(ShadowForm) && !API.PlayerHasBuff(ShadowForm)) {
					API.CastSpell(ShadowForm);
				} else if (API.TargetDebuffRemainingTime(DevouringPlague) == 0 && API.CanCast(DevouringPlague)) {
					API.CastSpell(DevouringPlague);
				} else if (API.CanCast(MindBlast) && API.PlayerCurrentCastSpellID != 48127 && API.LastSpellCastInGame != MindBlast && !API.ToggleIsEnabled(NoMB)) {
					API.CastSpell(MindBlast);
				} else {
					int gcd = (int)(API.SpellGCDTotalDuration + 20);
					if (API.CanCast(ShadowWordDeath) && (API.TargetDebuffRemainingTime(DevouringPlague) < gcd)) {
						API.CastSpell(ShadowWordDeath);
					} else if (API.CanCast(MindSear) && (API.TargetUnitInRangeCount >= 3 && IsAOE)) {
						API.CastSpell(MindSear);
					} else if (API.CanCast(MindFlay) && ((API.TargetUnitInRangeCount <= 2 && IsAOE) || !IsAOE)) {
						API.CastSpell(MindFlay);
					}
				}
			}
		}


        public override void OutOfCombatPulse()
				{
					if (!API.PlayerIsMounted && IsNotEating)
					{
						CastSpellIfNotActive(VampiricEmbrace);
						CastSpellIfNotActive(InnerFire);
						CastBuffIfApplicable(PowerWordFortitude, POPowerWordFortitude);
						CastBuffIfApplicable(DivineSpirit, PODivineSpirit);
						CastBuffIfApplicable(ShadowProt, POShadowProt);
						CastSpellIfNotActive(ShadowForm);
					}
				}

				private void CastSpellIfNotActive(string spell)
				{
					if (API.CanCast(spell) && !API.PlayerHasBuff(spell))
					{
						API.CastSpell(spell);
					}
				}

				private void CastBuffIfApplicable(string buff, string raidBuff)
				{
					if (API.CanCast(buff) && !API.PlayerHasBuff(buff) && !API.PlayerHasBuff(raidBuff) && (!API.PlayerIsInRaid || API.PlayerIsInGroup))
					{
						API.CastSpell(buff);
					}
				}


        public override void Pulse()
        {


        }

    }
}
